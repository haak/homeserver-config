---
version: "3.3"
services:
  plex:
    image: linuxserver/plex
    container_name: plex
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - VERSION=docker
      - UMASK_SET=022 #optional
      - PLEX_CLAIM= #optional
    volumes:
      - $PLEX_DATA:/config
      - $TV_DATA:/tv
      - $MOVIE_DATA:/movies
      - $MUSIC_FOLDER:/music
    ports:
      - $PLEX_PORT:$PLEX_PORT
    restart: unless-stopped
#####################################################
  ombi:
    image: linuxserver/ombi
    container_name: ombi
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
      - BASE_URL=/ombi #optional
    volumes:
      - $OMBI_DATA:/config
    ports:
      - $OMBI_PORT:3579
    restart: unless-stopped
#####################################################
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
      - UMASK_SET=022 #optional
    volumes:
      - $SONARR_DATA:/config
      - $TV_DATA:/tv
      - $COMPLETE_FOLDER:/downloads
    ports:
      - $SONARR_PORT:8989
    restart: unless-stopped
#####################################################
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
      - UMASK_SET=022 #optional
    volumes:
      - $RADARR_DATA:/config
      - $MOVIE_DATA:/movies
      - $COMPLETE_FOLDER:/downloads
    ports:
      - $RADARR_PORT:7878
    restart: unless-stopped
#####################################################
  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
    volumes:
      - $HEIMDALL_DATA:/config
    ports:
      - $HEIMDALL_PORT1:80
      # - $HEIMDALL_PORT2:443
    restart: unless-stopped
#####################################################
  transmission-openvpn:
    image: haugene/transmission-openvpn
    container_name: transmission-openvpn
    volumes:
      - $COMPLETE_FOLDER:/data/completed
      - $INCOMPLETE_FOLDER:/data/incomplete
      - $TRANSMISSION_WATCH:/data/watch
      - $TRANSMISSION_HOME:/data/transmission-home
      - '/etc/localtime:/etc/localtime:ro'
    environment:
        - CREATE_TUN_DEVICE=true
        - OPENVPN_PROVIDER=$OPENVPN_PROVIDER
        - OPENVPN_CONFIG=$OPENVPN_CONFIG
        - OPENVPN_USERNAME=$PIA_USERNAME
        - OPENVPN_PASSWORD=$PIA_PASSWORD
        - WEBPROXY_ENABLED=false
        - LOCAL_NETWORK=192.168.0.0/16
    cap_add:
        - NET_ADMIN
    logging:
        driver: json-file
        options:
            max-size: 10m
    ports:
      - $TRANSMISSION_PORT:9091
      - 6881:6881
      - 6881:6881/udp
      - 8082:8082
    restart: unless-stopped
#####################################################
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
      - AUTO_UPDATE=true #optional
      - RUN_OPTS=run options here #optional
    volumes:
      - $JACKETT_DATA:/config
      - $JACKETT_DATA_BLACKHOLE:/downloads
    ports:
      - $JACKETT_PORT:9117
    restart: unless-stopped
#####################################################
  portainer:
    image: portainer/portainer
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - $PORTAINER_PORT1:9000
      - $PORTAINER_PORT2:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $PORTAINER_DATA:/data
#####################################################
  sabnzbd:
    image: linuxserver/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
    volumes:
      - $SABNZBD_DATA:/config
      - $COMPLETE_FOLDER:/downloads
      - $INCOMPLETE_FOLDER:/incomplete-downloads #optional
    ports:
      - $SABNZBD_PORT1:8080 
      - $SABNZBD_PORT2:9090
    restart: unless-stopped
####################################################
  piwigo:
    image: linuxserver/piwigo
    container_name: piwigo
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
    volumes:
      - $PIWIGO_DATA:/config
    ports:
      - $PIWIGO_PORT:80
    restart: unless-stopped
####################################################
  # pyload:
  #   image: linuxserver/pyload
  #   container_name: pyload
  #   environment:
  #     - PUID=$PUID
  #     - PGID=$PGID
  #     - TZ=Europe/London
  #   volumes:
  #     - $PYLOAD_DATA:/config
  #     - $COMPLETE_FOLDER:/downloads
  #   ports:
  #     - 8001:8000
  #     - 7227:7227 #optional
  #   restart: unless-stopped
####################################################
#   youtube-dl:
#     image: "kmb32123/youtube-dl-server"
#     volumes:
#       - $YOUTUBEDL_DATA:/youtube-dl
#     restart: always
# ####################################################
#   youtube-dl-nas:
#     image: modenaf360/youtube-dl-nas
#     container_name: youtube-dl-nas
#     environment:
#       - PUID=$PUID
#       - PGID=$PGID
#       - TZ=Europe/London
#       - MY_ID=$YOUTUBEDL_MY_ID
#       - MY_PW=$YOUTUBEDL_MY_PW
#     volumes:
#       - $YOUTUBEDL_DATA:/downfolder
#     ports:
#       - 8081:8080
####################################################
  mylar:
    image: linuxserver/mylar
    container_name: mylar
    environment:
      - PUID=$PUID
      - PGID=$PGID
    volumes:
      - $MYLAR_DATA:/config
      - $COMICS:/comics
      - $COMPLETE_FOLDER:/downloads
    ports:
      - $MYLAR_PORT:8090
    restart: unless-stopped
####################################################
  syncthing:
    image: linuxserver/syncthing
    container_name: syncthing
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
      - UMASK_SET=022
    volumes:
      - $SYNCTHING_DATA:/config
    ports:
      - $SYNCTHING_PORT0:8384
      - $SYNCTHING_PORT1:22000
      - $SYNCTHING_PORT0:21027/udp
    restart: unless-stopped
####################################################
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/London
      - UMASK_SET=022 #optional
    volumes:
      - $BAZARR_DATA:/config
      - $MOVIE_DATA:/movies
      - $TV_DATA:/tv
    ports:
      - $BAZARR_PORT:6767
    restart: unless-stopped
# ####################################################
#   grafana:
#     image: grafana/grafana
#     container_name: grafana
#     volumes:
#       - $GRAFANA_DATA:/var/lib/grafana
#     ports:
#       - $GRAFANA_PORT:3000
#     restart: unless-stopped
####################################################
  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - UMASK_SET=022
      - WEBUI_PORT=8082
    volumes:
      - $QBITORRENT_DATA2:/config
      - $COMPLETE_FOLDER:/downloads/completed
      - $INCOMPLETE_FOLDER:/downloads/incomplete
      - $TRANSMISSION_WATCH:/watch

    restart: unless-stopped
    network_mode: "container:transmission-openvpn"
####################################################
  deemix:
    container_name: deemix
    image: registry.gitlab.com/bockiii/deemix-docker
    restart: unless-stopped
    ports:
      - 6595:6595
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - $MUSIC_DOWNLOADS:/downloads
      - $DEEMIX_DATA:/config
####################################################
  beets:
    image: linuxserver/beets
    container_name: beets
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - $BEETS_DATA:/config
      - $MUSIC_FOLDER:/music
      - $MUSIC_DOWNLOADS:/downloads
    ports:
      - 8337:8337
    restart: unless-stopped
####################################################
  airsonic:
    image: linuxserver/airsonic
    container_name: airsonic
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      # - CONTEXT_PATH=URL_BASE #optional
      # - JAVA_OPTS=options #optional
    volumes:
      - $AIRSONIC_DATA:/config
      - $MUSIC_FOLDER:/music
      # - /path/to/playlists:/playlists
      # - /path/to/podcasts:/podcasts
      # - /path/to/other media:/media #optional
    ports:
      - 4040:4040
    # devices:
      # - /dev/snd:/dev/snd #optional
    restart: unless-stopped
####################################################
  x:
    container_name: pihole
    image: pihole/pihole:latest
    # network_mode: host
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "8006:80/tcp"
      - "443:443/tcp"
    environment:
      TZ: 'Europe/Dublin'
      # ServerIP: '192.168.178.53'
      # WEBPASSWORD: 'set a secure password here or it will be random'
    # Volumes store your data between container upgrades
    volumes:
      # - $PIHOLE_DATA:/etc
      - './etc-pihole/:/etc/pihole/'
      - './etc-dnsmasq.d/:/etc/dnsmasq.d/'
    dns:
      - 127.0.0.1
      - 1.1.1.1
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
####################################################
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports: 
      - 3000:3000
####################################################
  organizr:
    image: linuxserver/organizr
    container_name: organizr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London 
    volumes:
      - $ORGANIZER_DATA:/config
    ports:
      - $ORGANIZER_PORT:80
    restart: unless-stopped
####################################################
  freshrss:
    image: linuxserver/freshrss
    container_name: freshrss
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - $FRESHRSS_DATA:/config
    ports:
      - $FRESHRSS_PORT:80
    restart: unless-stopped
####################################################

  drone-server:
    image: drone/drone:1
    container_name: drone-server
    ports:
      - $DRONE_PORT:80
    volumes:
      - $DRONE_DATA:/data
    restart: always
    environment:
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}

      # GitHub Config
      - DRONE_GITHUB_SERVER=https://github.com
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}
      - DRONE_USER_FILTER=$DRONE_USER_FILTER

      - DRONE_LOGS_PRETTY=true
      - DRONE_LOGS_COLOR=true
####################################################
  # runner for docker version
  drone-runner:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_HOST=${DRONE_RPC_HOST}
      - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=3
####################################################
  noip:
    image: coppit/no-ip
    container_name: noip
    restart: always
    volumes: 
      - /etc/localtime:/etc/localtime
      - $NOIP_DATA:/config
####################################################
  homer:
    image: b4bz/homer:latest
    container_name: homer
    restart: unless-stopped
    volumes:
      - $HOMER_DATA:/www/assets 
    ports:
      - $HOMER_PORT:8080
####################################################

  ddclient:
    image: linuxserver/ddclient
    container_name: ddclient
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - $DDCLIENT_DATA:/config
    restart: unless-stopped
####################################################
  nginx-hello:
    image: nginxdemos/hello
    container_name: nginx-hello
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    ports:
      - 80:80


    
      